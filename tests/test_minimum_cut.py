import os
from minimum_cut import minimum_cut


def test_medium_graphs() -> None:
    graph = [
        [1, 2], [1, 3], [1, 4], [1, 7],
        [2, 1], [2, 3], [2, 4],
        [3, 1], [3, 2], [3, 4],
        [4, 1], [4, 2], [4, 3], [4, 5],
        [5, 4], [5, 6], [5, 7], [5, 8],
        [6, 5], [6, 7], [6, 8],
        [7, 1], [7, 5], [7, 6], [7, 8],
        [8, 5], [8, 6], [8, 7]]
    assert minimum_cut(graph) == 2, "test 1"
    graph = [
        [1, 4], [1, 2], [1, 7], [1, 3],
        [2, 4], [2, 1], [2, 3],
        [3, 1], [3, 2], [3, 4],
        [4, 5], [4, 1], [4, 2], [4, 3],
        [5, 8], [5, 7], [5, 6], [5, 4],
        [6, 8], [6, 5], [6, 7],
        [7, 6], [7, 8], [7, 5], [7, 1],
        [8, 7], [8, 6], [8, 5]]
    assert minimum_cut(graph) == 2, "test 2"
    graph = [
        [1, 2], [1, 3], [1, 4],
        [2, 1], [2, 3], [2, 4],
        [3, 1], [3, 2], [3, 4],
        [4, 1], [4, 2], [4, 3], [4, 5],
        [5, 4], [5, 6], [5, 7], [5, 8],
        [6, 5], [6, 7], [6, 8],
        [7, 5], [7, 6], [7, 8],
        [8, 5], [8, 6], [8, 7]]
    assert minimum_cut(graph) == 1, "test 3"
    graph = [
        [1, 3], [1, 4], [1, 2],
        [2, 1], [2, 4], [2, 3],
        [3, 1], [3, 2], [3, 4],
        [4, 5], [4, 3], [4, 2], [4, 1],
        [5, 4], [5, 8], [5, 6], [5, 7],
        [6, 8], [6, 7], [6, 5],
        [7, 5], [7, 8], [7, 6],
        [8, 5], [8, 7], [8, 6]]
    assert minimum_cut(graph) == 1, "test 4"
    graph = [
        [1, 2], [1, 3], [1, 4], [1, 5],
        [2, 1], [2, 4], [2, 3],
        [3, 1], [3, 2], [3, 4],
        [4, 8], [4, 3], [4, 2], [4, 1],
        [5, 1], [5, 8], [5, 6], [5, 7],
        [6, 8], [6, 7], [6, 5],
        [7, 5], [7, 8], [7, 6],
        [8, 4], [8, 5], [8, 7], [8, 6]]
    assert minimum_cut(graph) == 2, "test 5"


def test_large_graphs() -> None:
    graph = [
        [1, 19], [1, 15], [1, 36], [1, 23], [1, 18], [1, 39],
        [2, 36], [2, 23], [2, 4], [2, 18], [2, 26], [2, 9],
        [3, 35], [3, 6], [3, 16], [3, 11],
        [4, 23], [4, 2], [4, 18], [4, 24],
        [5, 14], [5, 8], [5, 29], [5, 21],
        [6, 34], [6, 35], [6, 3], [6, 16],
        [7, 30], [7, 33], [7, 38], [7, 28],
        [8, 12], [8, 14], [8, 5], [8, 29], [8, 31],
        [9, 39], [9, 13], [9, 20], [9, 10], [9, 17], [9, 2],
        [10, 9], [10, 20], [10, 12], [10, 14], [10, 29],
        [11, 3], [11, 16], [11, 30], [11, 33], [11, 26],
        [12, 20], [12, 10], [12, 14], [12, 8],
        [13, 24], [13, 39], [13, 9], [13, 20],
        [14, 10], [14, 12], [14, 8], [14, 5],
        [15, 26], [15, 19], [15, 1], [15, 36],
        [16, 6], [16, 3], [16, 11], [16, 30], [16, 17], [16, 35], [16, 32],
        [17, 38], [17, 28], [17, 32], [17, 40], [17, 9], [17, 16],
        [18, 2], [18, 4], [18, 24], [18, 39], [18, 1],
        [19, 27], [19, 26], [19, 15], [19, 1],
        [20, 13], [20, 9], [20, 10], [20, 12],
        [21, 5], [21, 29], [21, 25], [21, 37],
        [22, 32], [22, 40], [22, 34], [22, 35],
        [23, 1], [23, 36], [23, 2], [23, 4],
        [24, 4], [24, 18], [24, 39], [24, 13],
        [25, 29], [25, 21], [25, 37], [25, 31],
        [26, 31], [26, 27], [26, 19], [26, 15], [26, 11], [26, 2],
        [27, 37], [27, 31], [27, 26], [27, 19], [27, 29],
        [28, 7], [28, 38], [28, 17], [28, 32],
        [29, 8], [29, 5], [29, 21], [29, 25], [29, 10], [29, 27],
        [30, 16], [30, 11], [30, 33], [30, 7], [30, 37],
        [31, 25], [31, 37], [31, 27], [31, 26], [31, 8],
        [32, 28], [32, 17], [32, 40], [32, 22], [32, 16],
        [33, 11], [33, 30], [33, 7], [33, 38],
        [34, 40], [34, 22], [34, 35], [34, 6],
        [35, 22], [35, 34], [35, 6], [35, 3], [35, 16],
        [36, 15], [36, 1], [36, 23], [36, 2],
        [37, 21], [37, 25], [37, 31], [37, 27], [37, 30],
        [38, 33], [38, 7], [38, 28], [38, 17], [38, 40],
        [39, 18], [39, 24], [39, 13], [39, 9], [39, 1],
        [40, 17], [40, 32], [40, 22], [40, 34], [40, 38]]
    assert minimum_cut(graph) == 3, "test 3"


def test_largest_graphs() -> None:
    folder = os.path.dirname(os.path.abspath(__file__))
    path = os.path.join(folder, 'LargeArrayMinCut.txt')
    graph = []
    with open(path, encoding='utf-8') as file:
        for line in file:
            values = line.strip().split()
            node = int(values[0])
            edges = list(map(int, values[1:]))
            for edge in edges:
                graph.append([node, edge])
    assert minimum_cut(graph, 1000) == 17
